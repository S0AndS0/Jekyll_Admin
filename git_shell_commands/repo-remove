#!/usr/bin/env bash

__SOURCE__="${BASH_SOURCE[0]}"
while [[ -h "${__SOURCE__}" ]]; do
	__SOURCE__="$(find "${__SOURCE__}" -type l -ls | sed -n 's@^.* -> \(.*\)@\1@p')"
done
__DIR__="$(cd -P "$(dirname "${__SOURCE__}")" && pwd)"
__NAME__="${__SOURCE__##*/}"
__PATH__="${__DIR__}/${__NAME__}"

## Provides: argument_parser <arg-array-reference> <acceptable-arg-reference>
source "${__DIR__}/shared_functions/arg_parser"

usage(){
	_return_status="${1:-0}"
	_repo_name="${_repo_name:-repository-name}"
	cat <<EOF
## Usage
# ssh ${USER}@host-or-ip ${__NAME__} ${_repo_name}
#
## Removes files &/or directories for ${_repo_name}
##  under: ~/git/${_repo_name}
#
# ${_repo_name}
#  Name of repository to run
#  rm -rfv "~/git/${_repo_name}"
#
# -h	--help help
#  Displays this message and exits
EOF
	return "${_return_status}"
}

_args=("${@:?# No arguments provided try: ${__NAME__} help}")
_valid_args=('--help|-h|help:bool' '--repo-name:posix-nil')
argument_parser '_args' '_valid_args'
_exit_status="$?"

_git_path="${HOME}/git/${_repo_name}"

if ((_help)) || ((_exit_status)) || [ -z "${_repo_name}" ]; then
	usage "${_exit_status}"
	exit "$?"
fi

[[ -d "${_git_path}" ]] && rm -rfv "${_git_path}"

echo "# ${__NAME__} finished"
