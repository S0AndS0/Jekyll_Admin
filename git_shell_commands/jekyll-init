#!/usr/bin/env bash

__SOURCE__="${BASH_SOURCE[0]}"
while [[ -h "${__SOURCE__}" ]]; do
    __SOURCE__="$(find "${__SOURCE__}" -type l -ls | sed -n 's@^.* -> \(.*\)@\1@p')"
done
__DIR__="$(cd -P "$(dirname "${__SOURCE__}")" && pwd)"
__NAME__="${__SOURCE__##*/}"
__AUTHOR__='S0AndS0'
__DESCRIPTION__='Initializes new Git repository with a gh-pages branch'


## Provides: argument_parser <arg-array-reference> <acceptable-arg-reference>
source "${__DIR__}/shared_functions/arg_parser"

## Provides: git_add_commit <string>
source "${__DIR__}/shared_functions/git_shortcuts"

## Provides: '__license__ <description> <author>'
source "${__DIR__}/shared_functions/license"


usage(){
    _message="${1}"
    _repo_name="${_repo_name:-repository-name}"
    cat <<EOF
## Usage
# ssh ${USER}@host-or-ip ${__NAME__} ${_git_args[@]:-$_repo_name}
#
# ${__DESCRIPTION__}
#
# --quite
#  Git initializes quietly
#
# --shared
#  Allow git push for group $(groups | awk '{print $1}')
#
# --template=<path>
#  Template git repository that git init should pull from
#
# ${_repo_name}
#  Name of repository to internalize or add Jekyll gh-pages branch to
#
## For detailed documentation of the above options.
##  See: git help init
#
# --clean
#  Remove non-git related files and directories from gh-pages branch prior to
#  initializing Jekyll related files. This allows for files from previous branch
#  to remain separate from files being tracked on the gh-pages branch.
#
# -l --license
# Shows script or project license then exits
#
# -h    --help help
#  Displays this message and exits
#
## The following options maybe used to modify the generated _config.yml file
#
# --title ${_title}
# --email ${_email}
# --twitter-username ${_twitter_username}
# --github-username ${_github_username}
EOF
    if [ -n "${_message}" ] && [[ "${_message}" != '0' ]]; then
        printf 'Error - %s\n' "${_message}" >&2
    fi
}


_args=("${@:?# No arguments provided try: ${__NAME__} help}")
_valid_args=('--help|-h|help:bool'
             '--license|-l|license:bool'
             '--quiet:bool'
             '--clean:bool'
             '--shared:bool'
             '--template:path'
             '--title:print'
             '--email:print'
             '--twitter-username:posix'
             '--github-username:posix'
             '--repo-name:posix-nil')
argument_parser '_args' '_valid_args'
_exit_status="$?"
_git_args=()
if ((_quiet)); then  _git_args+=('--quiet');  fi
if ((_shared)); then _git_args+=('--shared'); fi
if [ -n "${_template}" ]; then  _git_args+=("--template='${_template}'"); fi
if [ -n "${_repo_name}" ]; then _git_args+=("${_repo_name}"); fi


## Set defaults for some variables if not already set
_github_username="${_github_username:-$USER}"
if [ -z "${_title}" ]; then
    for _word in ${_repo_name//[-_]/ }; do
        if [[ "${#_word}" -ge '4' ]]; then
            _temp_title+=("${_word^}")
        else
            _temp_title+=("${_word}")
        fi
    done
    _title="${_temp_title[@]}"
fi
_bundle_path="${HOME}/.bundle/install"


if ((_help)) || ((_exit_status)); then
    usage "${_exit_status}"
    exit "${_exit_status}"
elif ((_license)); then
    __license__ "${__DESCRIPTION__}" "${__AUTHOR__}"
    exit 0
fi

if [ -z "${_repo_name}" ]; then
    usage 'missing repository name argument!'
    exit "1"
fi

_git_path="${HOME}/git/${_repo_name:?No repository name provided}"
_old_PWD="${PWD}"
if [ -d "${_git_path}" ]; then cd "${_git_path}"; fi
_git_dir="$(git rev-parse --git-dir 2>/dev/null)"


if [[ "${_git_path}/${_git_dir}" == "${_git_path}/.git" ]]; then
    printf '# Skipping git init, path already tracked by git: %s\n' "${_git_preexisting_dir}"
elif [[ "${_git_path}/${_git_dir}" == "${_git_path}/." ]]; then
    echo '# Bare git repository detected, cannot install Jekyll to that right now'
    exit 1
else
    if [ -e "${HOME}/git-shell-commands/git-init" ]; then
        "${HOME}/git-shell-commands/git-init" ${_git_args[@]}
    else
        cd "${HOME}/git" || exit 1
        git init ${_git_args[@]}
    fi
fi


cd "${_git_path}" || exit 1
_git_branches="$(git branch --list)"
_orig_branch="$(awk '/\*/{print $2}' <<<"${_git_branches}")"
_pages_branch="$(awk '/gh-pages/{print $2}' <<<"${_git_branches}")"
if [ -n "${_pages_branch}" ]; then
    printf '# There is already a pages branch %s for repository %s\n' "${_pages_branch}" "${_repo_name}"
    exit 1
fi

git_add_commit "Added files on ${_orig_branch} prior to installing Bundler & Jekyll to gh-pages branch"

git checkout -b gh-pages
if [[ "$(git config receive.denyCurrentBranch)" != 'updateInstead' ]]; then
    git config receive.denyCurrentBranch updateInstead
fi

if ((_clean)); then
    for _path in ${_git_path}/*; do
        case "${_path}" in
            *'.git')       [[ -d "${_path}" ]] && continue ;;
            *'.gitignore') [[ -f "${_path}" ]] && continue ;;
        esac
        git rm -rf "${_path}"
    done
    git_add_commit 'Cleaned gh-pages branch of files from parent branch'
fi


modify_config_yml(){
    if ! [ -f "${_git_path}/_config.yml" ]; then
        printf 'Error - no Jekyll config file found under %s\n' "${_git_path}" >&2
        return 1
    fi

    if [ -n "${_title}" ]; then
        sed -i "/title:/ { s#:[a-zA-Z 0-9]*#${_title}#; }" "${_git_path}/_config.yml"
    fi
    if [ -n "${_email}" ]; then
        sed -i "/email:/ { s#:[a-zA-Z 0-9]*#${_email}#; }" "${_git_path}/_config.yml"
    fi
    if [ -n "${_twitter_username}" ]; then
        sed -i "/_twitter_username:/ { s#:[a-zA-Z 0-9]*#${_twitter_username}#; }" "${_git_path}/_config.yml"
    fi
    if [ -n "${_github_username}" ]; then
        sed -i "/github_username:/ { s#:[a-zA-Z 0-9]*#${_github_username}#; }" "${_git_path}/_config.yml"
    fi

    if [[ "${_repo_name}" != "${_github_username}" ]]; then
        tee -a "${_git_path}/_config_baseurl.yml" >/dev/null <<EOF
# Use base URL to simulate GitHub pages behaviour
baseurl: "${_repo_name}"
EOF
    fi
}


source "${HOME}/.bash_aliases"
bundle init
bundle install --path "${_bundle_path}"
bundle add jekyll
bundle exec jekyll new --force --skip-bundle "${_git_path}"
modify_config_yml
bundle install


cat >> "${_git_path}/.gitignore" <<EOF
# Ignore files and folders generated by Bundler
Bundler
vendor
.bundle
Gemfile.lock
EOF

git_add_commit 'Added files from Bundler & Jekyll to git tracking'

[[ "${_old_PWD}" == "${_git_path}" ]] || cd "${_old_PWD}"


printf '# Clone %s via: git clone %s@domain_or_ip:%s\n' "${_repo_name}" "${USER}" "${_git_path//${HOME}\//}"
printf '# %s finished\n' "${__NAME__}"
